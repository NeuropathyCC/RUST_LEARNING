// 引用(reference)与借用(borrow): 
// 引用是rust提供的一种指针语义，指针是指向某块内存的地址，而引用可以看作某块内存的别名(Alias)
// 引用分为可变引用(&)与不可变引用(&mut)
// 引用&x 也成为借用Borrowing, 通过&操作符完成所有权的借用，借用个不会发生所有权转移
// 借用后，所有者：1: 不可变借用期间, 所有者无法修改资源，可以访问，无法再次出借可变借用，可以出借不可变 
//               2: 可变借用期间，所有者不能访问资源，也不可以再次出借所有权
// 引用离开其作用域时便归还所有权

// borrow rule:
// 1: 借用生命周期不能大于所有者生命周期 
// 2: 可变借用不能有别名(Alias)
// 3: 不可变借用不能再次出借为可变借用
// *: 对移动语义类型解引用会转移所有权
fn compute(input: &u32, output: &mut u32) {
    if *input > 10 {
        *output = 1;
    }
    if *input > 5 {
        *output *= 2;
    }
}